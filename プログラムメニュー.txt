プロジェクト名: sudoコマンド実行GUIランチャー
1. 詳細仕様書（更新版）
1.1. 概要
本アプリケーションは、LinuxのsudoコマンドをGUIから実行するためのランチャーです。ユーザーは、GUI上のボタンをクリックすることで、登録されたsudoコマンドをルート権限で別ターミナルで実行できます。ボタンの追加、削除、編集は設定画面から行い、設定はJSONファイルに保存されます。
1.2. 開発環境
OS: Lubuntu (VirtualBox)
プログラミング言語: Python 3
GUIライブラリ: tkinter
1.3. 機能
コマンド実行:
ボタンをクリックすると、対応するsudoコマンドをルート権限で別ターミナルで実行します。
実行するプログラムの場所情報は、プログラムのプロパティから取得します。
sudoパスワードは、別ターミナルで入力します。
設定管理:
設定画面からボタンの追加、削除、編集ができます。
設定はJSONファイル（config.json）に保存されます。
GUI:
縦長のメインウィンドウにボタンを縦に配置します。
ボタンが多い場合はスクロールバーを表示します。
「閉じる」ボタンでアプリケーションを終了します。
エラーハンドリング:
JSONファイルの読み込み失敗時には、エラーメッセージを表示し、新規作成またはキャンセルを選択させます。
1.4. JSONファイルの構造
JSON
{
  "buttons": [
    {
      "label": "プログラムA",
      "command": "/home/admin/programA"
    },
    {
      "label": "プログラムB",
      "command": "/home/admin/programB"
    }
  ]
}


command：実行するプログラムの絶対パスを格納します。
1.5. 設定画面の詳細
ボタン追加:
別ウィンドウでダイアログを表示し、ラベル名とコマンド（プログラムの絶対パス）を入力させます。
入力内容を確認するダイアログを表示し、確定またはキャンセルを選択させます。
確定した場合、JSONファイルを更新し、新しいボタンをGUIに追加します。
キャンセルした場合、処理を中断します。
ボタン削除:
各ボタンの横に削除ボタンを配置します。
削除ボタンをクリックすると、確認ダイアログを表示し、確定またはキャンセルを選択させます。
確定した場合、JSONファイルを更新し、ボタンをGUIから削除します。
キャンセルした場合、処理を中断します。
ボタン編集:
各ボタンの横に編集ボタンを配置します。
編集ボタンをクリックすると、ボタン追加と同じようなダイアログを表示し、ラベル名とコマンド（プログラムの絶対パス）を編集できるようにします。
1.6. コマンド実行の詳細
sudoコマンドを別ターミナルで実行する際に、commandで指定されたプログラムの絶対パスを使用します。
常にルート権限で実行します。
1.7. セキュリティ
sudoersファイルを使用して、特定のコマンドをパスワードなしで実行できるように設定することを推奨します。
2. テスト仕様書（更新版）
2.1. テスト環境
OS: Lubuntu (VirtualBox)
Python 3
tkinter
2.2. テストの種類
単体テスト: 各関数やメソッドの動作を検証
結合テスト: 複数のコンポーネントの連携を検証
GUIテスト: ユーザーインターフェースの動作を検証
受け入れテスト: 要件を満たしているかを検証
2.3. テストケース
JSONファイルの読み込み・書き込み:
正常なJSONファイル、不正なJSONファイル、空のJSONファイルをテスト
JSONファイルの追加、削除、編集が正常に行えるかをテスト
コマンド実行:
正常なコマンド、不正なコマンド、sudo権限が必要なコマンドをテスト
プログラムの絶対パスが正しく使用されるかをテスト
ルート権限で実行されるかをテスト
GUIの各コンポーネント:
ボタンのクリック、ダイアログの表示、スクロールバーの動作をテスト
設定メニュー:
それぞれのダイアログの動作、入力内容がJSONファイルに正常に書き込まれるかをテスト
エラーハンドリング:
各状況で想定されるエラーが発生するか、エラーメッセージが適切に表示されるかをテスト
2.4. テスト実施手順
テスト環境を構築します。
各機能のテストケースを作成します。
テストコードを作成し、テストを実行します。
テスト結果を確認し、必要に応じて修正します。
2.5. テスト自動化
必要に応じて、継続的インテグレーション（CI）ツールを使用したテスト自動化を検討します。
